--- apt-0.3.19cnc55~/tools/genbasedir	Wed Mar  6 20:17:13 2002
+++ apt-0.3.19cnc55/tools/genbasedir	Thu Mar 21 22:15:32 2002
@@ -69,99 +69,103 @@
 # Language setting to generate a consistent pkglist.
 #
  
-usage="\
-Usage: genbasedir [<options>] <distribution> <comp1> [<comp2> ... <compN>]\n\
-Options:\n\
-   -s, --sign		Generate and sign hashfile\n\
-   --hashonly		Do hashfile stuff only\n\
-   --listonly		Generate pkglists/srclists and quit\n\
-   --bz2only		Generate only compressed lists\n\
-   --topdir=dir		Top directory of repository\n\
-   --progress		Show progress bars for genpkglist/gensrclist\n\
-   --updateinfo=file	Update information file\n"
+PROG="${0##*/}"
 
 basedir=.
 signature=0
 listonly=0
 hashonly=0
-updateinfo=""
-mapi=0
-bz2only=0
+updateinfo=
+mapi=
+gpguid=
+topdir=
+bz2only=k
 progress=
 
 # bloat is necessary for non-Conectiva distros, at least RH,
 # because they use file dependencies with a non-predictable
 # heuristic. So we can't strip-off paths that will probably
 # never appear in dependencies.
-bloat=""
-
+bloat=
 
 # flat is for repositories where RPMS and SRPMS are kept in the
 # same directory level.
 flat=""
 
-while test $# -gt 0 ; do
-    case "${1}" in
-    -h | --help)
-        echo -e "${usage}"
-        exit 0
-        ;;
-    --mapi)
-    	# hee hee hee..
-        mapi=1
-	;;
-    --listonly)
-        listonly=1
-	;;
-    --hashonly)
-        hashonly=1
-	;;
-    --bz2only)
-        bz2only=1
-        ;;
-    --updateinfo=*)
-	updateinfo=${1}
-	;;
-    --bloat)
-	bloat="--bloat"
-	;;
-    --flat)
-        flat="--flat"
-	;;
-    --topdir=*)
-        topdir="`echo \"${1}\" | sed -e 's/^[^=]*=//'`"
-	if [ ! -d $topdir ]; then
-	     echo "Invalid top directory for distribution ${topdir}" 1>&2
-	     exit 1
-	fi
-        ;;
-    --progress)
-        progress="--progress"
-        ;;
-    -s | --sign)
-	signature=1;
-	;;
-    -*)
-        echo -e "${usage}" 1>&2
-        exit 1
-        ;;
-    *)
-        break
-        ;;
-    esac
-    shift
+USAGE()
+{
+	cat >&2 <<EOF
+Usage: genbasedir [<options>] <distribution> <comp1> [<comp2> ... <compN>]
+Options:
+   -s, --sign          Generate and sign hashfile
+   --hashonly          Do hashfile stuff only
+   --listonly          Generate pkglists/srclists and quit
+   --bz2only           Generate only compressed lists
+   --topdir=dir        Top directory of repository
+   --updateinfo=file   Update information file
+   --bloat             Do not strip the package file list. Needed for some
+                       distributions that use non-automatically generated file dependencies
+   --uid=uid           Pass different GPG user ID for signing
+   --progress          Show progress bars for genpkglist/gensrclist
+EOF
+	[ -n "$1" ] && exit "$1" || exit
+}
+
+TEMP=`getopt -n $PROG -o hs -l help,mapi,listonly,bz2only,hashonly,updateinfo:,bloat,topdir:,sign,uid:,progress -- "$@"` || USAGE
+eval set -- "$TEMP"
+
+while :; do
+	case "$1" in
+		--listonly) shift; listonly=1
+			;;
+		--bz2only) shift; bz2only=
+			;;
+		--hashonly) shift; hashonly=1
+			;;
+		-s|--sign) shift; signature=1
+			;;
+		--bloat) shift; bloat="--bloat"
+			;;
+		--mapi) shift; mapi="--mapi"
+			;;
+		--updateinfo) shift; updateinfo="$1"; shift
+			;;
+		--uid) shift; gpguid="$1"; shift
+			;;
+		--topdir) shift; topdir="$1"; shift
+			;;
+		--flat) shift; float="--float"
+			;;
+		--progress) shift; progress="--progress"
+			;;
+		-h|--help) USAGE 0
+			;;
+		--) shift; break
+			;;
+		*) echo "$PROG: unrecognized option: $1" >&2; exit 1
+			;;
+	esac
 done
 
-distro=${1}
-shift
+topdir="$(echo "$topdir" |sed '
+s:/\(\./\)\+:/:g
+s:/\+:/:g
+s:/$::
+')"
 
-components=$*
+[ -n "$topdir" ] || USAGE 1
 
-if [ -z "$components" ]; then
-    echo -e "${usage}"
-    exit 0
+if [ ! -d "$topdir" ]; then
+	echo "Invalid top directory for distribution: $topdir" >&2
+	exit 1
 fi
 
+distro=${1}
+shift
+
+components="$*"
+
+[ -n "$components" ] || USAGE 1
 
 getsize() {
     tmp=`wc -c $1`
@@ -186,75 +190,88 @@
 basedir_=`echo ${distro}/base|tr -s /`
 basedir=${topdir}/$basedir_
 
+WORKDIR=
+
+Exit()
+{
+	RETVAL=$?
+	trap '' EXIT
+	[ -z "$WORKDIR" ] || rm -rf "$WORKDIR"
+	exit $RETVAL
+}
+
+trap 'Exit ' SIGHUP SIGPIPE SIGINT SIGQUIT SIGTERM EXIT
+
+WORKDIR="$(mktemp -dt "$PROG.XXXXXXXXXX")"
+
+SRCIDX_COMP="$WORKDIR/comp"
+SRCIDX="$WORKDIR/total"
+
+saved_list=
+
+save_file()
+{
+	saved_list="$1"
+
+	if [ -f "$saved_list" ]; then
+		mv -f "$saved_list" "$saved_list.old"
+	else
+		saved_list=
+	fi
+}
 
-# release file
-# ------------
+compare_file()
+{
+	if [ -n "$saved_list" -a -f "$saved_list.old" ]; then
+            if cmp -s "$saved_list.old" "$saved_list"; then
+                mv -f "$saved_list.old" "$saved_list"
+	    else
+                rm -f "$saved_list.old"
+            fi
+        fi
+}
 
-#for comp in ${components}; do
-#     true > ${basedir}/release.$comp
-#           
-#done
+for comp in ${components}; do
+	[ -f "$basedir/release.$comp" ] || touch "$basedir/release.$comp"
+done
 
 
-if [ $hashonly -ne 1 ]; then
+if [ "$hashonly" -ne 1 ]; then
 # package lists
 # -------------
 
-true > /tmp/srcidx.$$
-
 for comp in ${components}; do
     echo -n "${comp}: "
 
     echo -n "pkglist "
 
+    newlist="$basedir/pkglist.$comp"
+
     # Save older pkglist
-    if [ -f $basedir/pkglist.$comp ]; then
-        mv -f $basedir/pkglist.$comp $basedir/pkglist.$comp.old
-    fi
+    save_file "$newlist"
 
-    if test x$updateinfo = x; then
-    	(cd $basedir; genpkglist $progress $bloat --index /tmp/srcidx.$comp.$$ $topdir/${distro} $comp)
+    :>"$SRCIDX_COMP"
+    if [ -z "$updateinfo" ]; then
+    	(cd "$basedir"; genpkglist $progress $bloat --index "$SRCIDX_COMP" "$topdir/$distro" "$comp")
     else
-    	(cd $basedir; genpkglist $progress $bloat --index /tmp/srcidx.$comp.$$ --info $updateinfo $topdir/${distro} $comp)
+    	(cd "$basedir"; genpkglist $progress $bloat --index "$SRCIDX_COMP" --info "$updateinfo" "$topdir/$distro" "$comp")
     fi
+
     if [ $? -ne 0 ]; then
 	echo
 	echo "Error executing genpkglist."
 	exit 1
     fi
 
-    if [ -f $basedir/pkglist.$comp ]; then
-
-        # Compare with older pkglist.
-        if [ -f $basedir/pkglist.$comp.old ]; then
-            if cmp -s $basedir/pkglist.$comp.old $basedir/pkglist.$comp; then
-                mv -f $basedir/pkglist.$comp.old $basedir/pkglist.$comp
-            fi
-        fi
-
-        # Save older compressed pkglist
-        if [ -f $basedir/pkglist.$comp.bz2 ]; then
-            mv -f $basedir/pkglist.$comp.bz2 $basedir/pkglist.$comp.bz2.old
-        fi
-
-        bzip2 -c $basedir/pkglist.$comp > $basedir/pkglist.$comp.bz2
-
-        # Compare with older compressed pkglist.
-        if [ -f $basedir/pkglist.$comp.bz2.old ]; then
-            if cmp -s $basedir/pkglist.$comp.bz2.old $basedir/pkglist.$comp.bz2; then
-                mv -f $basedir/pkglist.$comp.bz2.old $basedir/pkglist.$comp.bz2
-            fi
-        fi
-
-        if [ $bz2only -eq 1 ]; then
-		rm -f $basedir/pkglist.$comp
-        fi
+    # Compare with older pkglist.
+    compare_file
 
-        rm -f $basedir/pkglist.$comp.old
-        rm -f $basedir/pkglist.$comp.bz2.old
+    if [ -f "$newlist" ]; then
+	rm -f "$newlist.bz2"
+	bzip2 -9$bz2only "$newlist"
     fi
 
-    cat /tmp/srcidx.$comp.$$ >> /tmp/srcidx.$$
+    cat "$SRCIDX_COMP" >> "$SRCIDX"
 
     echo "done"
 done
@@ -264,77 +281,38 @@
 
     echo -n "srclist "
 
-    # Save older srclist
-    if [ -f $basedir/srclist.$comp ]; then
-        mv -f $basedir/srclist.$comp $basedir/srclist.$comp.old
-    fi
+    newlist="$basedir/srclist.$comp"
 
+    # Save older srclist
+    save_file "$newlist"
 
-    sfix="/.."
-    if test x$flat != x; then
-	sfix=""
-    fi
+    :>"$SRCIDX_COMP"
+    (cd "$basedir"; gensrclist $progress $flat $mapi "$topdir/$distro/.." "$comp" "$SRCIDX_COMP")
 
-    if [ $mapi -ne 0 ]; then
-        (cd $basedir; gensrclist $progress $flat --mapi $topdir/${distro}${sfix} $comp /tmp/srcidx.$comp.$$)
-    else
-        (cd $basedir; gensrclist $progress $flat $topdir/${distro}${sfix} $comp /tmp/srcidx.$$)
-    fi
     if [ $? -ne 0 ]; then
 	echo
 	echo "Error executing gensrclist."
 	exit 1
     fi
 
+    # Compare with older srclist.
+    compare_file
 
-
-    if [ -f $basedir/srclist.$comp ]; then
-
-        # Compare with older srclist.
-        if [ -f $basedir/srclist.$comp.old ]; then
-            if cmp -s $basedir/srclist.$comp.old $basedir/srclist.$comp; then
-                mv -f $basedir/srclist.$comp.old $basedir/srclist.$comp
-            fi
-        fi
-
-        # Save older compressed srclist
-        if [ -f $basedir/srclist.$comp.bz2 ]; then
-            mv -f $basedir/srclist.$comp.bz2 $basedir/srclist.$comp.bz2.old
-        fi
-
-        bzip2 -c $basedir/srclist.$comp > $basedir/srclist.$comp.bz2
-
-        # Compare with older compressed srclist.
-        if [ -f $basedir/srclist.$comp.bz2.old ]; then
-            if cmp -s $basedir/srclist.$comp.bz2.old $basedir/srclist.$comp.bz2; then
-                mv -f $basedir/srclist.$comp.bz2.old $basedir/srclist.$comp.bz2
-            fi
-        fi
-
-        if [ $bz2only -eq 1 ]; then
-		rm -f $basedir/srclist.$comp
-        fi
-
-        rm -f $basedir/srclist.$comp.old
-        rm -f $basedir/srclist.$comp.bz2.old
+    if [ -f "$newlist" ]; then
+	rm -f "$newlist.bz2"
+	bzip2 -9$bz2only "$newlist"
     fi
 
-    rm -f /tmp/srcidx.$comp.$$
-
     echo "done"
 done
 
 fi
 
-rm -f /tmp/srcidx.$$
-
-if [ $listonly -eq 0 ]; then
+if [ "$listonly" -eq 0 ]; then
     # Save older hashfile
-    if [ -f $basedir/hashfile ]; then
-        mv -f $basedir/hashfile $basedir/hashfile.old
-    fi
+    save_file "$basedir/hashfile"
     hf=${basedir}/hashfile
-    true > $hf
+    : > $hf
 else
     hf=/dev/null
 fi
@@ -348,27 +326,21 @@
 srclist=${basedir}/srclist
 release=${basedir}/release
 
-for comp in ${components}; do
-    echo -n "${comp}: "
-
-    echo -n "hashfile "
-    if [ -f ${pkglist}.$comp ]; then
-        phashstuff ${pkglist}.$comp ${pkglist_}.$comp >> $hf
-    fi
-    if [ -f ${srclist}.$comp ]; then
-        phashstuff ${srclist}.$comp ${srclist_}.$comp >> $hf
-    fi
+phash()
+{
+	if [ -f "$1" ]; then
+		phashstuff "$1" "$2" >> "$3"
+	fi
+}
 
-    if [ -f ${pkglist}.$comp.bz2 ]; then
-        phashstuff ${pkglist}.$comp.bz2 ${pkglist_}.$comp.bz2 >> $hf
-    fi
-    if [ -f ${srclist}.$comp.bz2 ]; then
-        phashstuff ${srclist}.$comp.bz2 ${srclist_}.$comp.bz2 >> $hf
-    fi
+for comp in ${components}; do
+    echo -n "$comp: hashfile "
 
-    if [ -f ${release}.$comp ]; then
-	phashstuff ${release}.$comp ${release_}.$comp >> $hf
-    fi
+    phash "$pkglist.$comp" "$pkglist_.$comp" "$hf"
+    phash "$srclist.$comp" "$srclist_.$comp" "$hf"
+    phash "$pkglist.$comp.bz2" "$pkglist_.$comp.bz2" "$hf"
+    phash "$srclist.$comp.bz2" "$srclist_.$comp.bz2" "$hf"
+    phash "$release.$comp" "$release_.$comp" "$hf"
 
     echo "done"
 done
@@ -377,34 +349,26 @@
 
 if [ $listonly -eq 0 ]; then
     # Compare with older hashfile.
-    if [ -f $basedir/hashfile.old ]; then
-        if cmp -s $basedir/hashfile.old $basedir/hashfile; then
-            mv -f $basedir/hashfile.old $basedir/hashfile
-        fi
-    fi
+    compare_file
 fi
 
-if [ $signature -ne 0 -a $listonly -eq 0 ]; then
+if [ "$signature" -ne 0 -a "$listonly" -eq 0 ]; then
+    if [ -n "$gpguid" ]; then
+	DEFAULTKEY="--default-key $gpguid"
+    else
+	DEFAULTKEY=
+    fi
 
     # Save older hashfile.gpg
-    if [ -f $basedir/hashfile.gpg ]; then
-        mv -f $basedir/hashfile.gpg $basedir/hashfile.gpg.old
-    fi
+    save_file "$basedir/hashfile.gpg"
 
-    gpg -armour -qs --yes $basedir/hashfile
-    mv -f $basedir/hashfile.asc $basedir/hashfile.gpg
-    rm -f $basedir/hashfile
+    gpg -armour $DEFAULTKEY -qs --yes $basedir/hashfile
+    mv -f "$basedir/hashfile.asc" "$basedir/hashfile.gpg"
+    rm -f "$basedir/hashfile"
 
     # Compare with older hashfile.gpg
-    if [ -f $basedir/hashfile.gpg.old ]; then
-        if cmp -s $basedir/hashfile.gpg.old $basedir/hashfile.gpg; then
-            mv -f $basedir/hashfile.gpg.old $basedir/hashfile.gpg
-        fi
-    fi
+    compare_file
 fi
-
-rm -f $basedir/hashfile.old
-rm -f $basedir/hashfile.gpg.old
 
 echo "All your base are belong to us !!"
 
